import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import type { MonthlyProjection } from '../types';
import { formatCurrency } from './calculations';

interface PDFData {
  projections: MonthlyProjection[];
  timeframe: 'monthly' | 'annual';
  restaurantName?: string;
  totalSavings: number;
  monthlySavings: number;
  annualSavings: number;
}

export const generateMarketingPlanPDF = (data: PDFData): void => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();

  // Header
  doc.setFontSize(24);
  doc.setTextColor(30, 64, 175);
  doc.text('Innowi Marketing Plan', pageWidth / 2, 20, { align: 'center' });

  doc.setFontSize(14);
  doc.setTextColor(100, 100, 100);
  doc.text('Your Personalized Savings Strategy', pageWidth / 2, 30, { align: 'center' });

  // Restaurant Name
  if (data.restaurantName) {
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text(`For: ${data.restaurantName}`, 20, 45);
  }

  // Executive Summary
  doc.setFontSize(16);
  doc.setTextColor(30, 64, 175);
  doc.text('Executive Summary', 20, data.restaurantName ? 60 : 50);

  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  const summaryY = data.restaurantName ? 70 : 60;
  doc.text(`Monthly Savings: ${formatCurrency(data.monthlySavings)}`, 20, summaryY);
  doc.text(`Annual Savings: ${formatCurrency(data.annualSavings)}`, 20, summaryY + 8);
  doc.text(`Total Projected Savings (12 months): ${formatCurrency(data.totalSavings)}`, 20, summaryY + 16);

  // Savings Projections Table
  doc.setFontSize(16);
  doc.setTextColor(30, 64, 175);
  doc.text('Monthly Savings Breakdown', 20, summaryY + 35);

  const tableData = data.projections.map((proj, index) => [
    `Month ${index + 1}`,
    formatCurrency(proj.savings),
    formatCurrency(proj.cumulativeSavings)
  ]);

  autoTable(doc, {
    startY: summaryY + 42,
    head: [['Month', 'Monthly Savings', 'Cumulative Savings']],
    body: tableData,
    theme: 'striped',
    headStyles: {
      fillColor: [30, 64, 175],
      textColor: [255, 255, 255],
      fontStyle: 'bold'
    },
    styles: {
      fontSize: 10,
      cellPadding: 5
    },
    alternateRowStyles: {
      fillColor: [240, 248, 255]
    }
  });

  // Get Y position after table
  const finalY = (doc as any).lastAutoTable.finalY || summaryY + 100;

  // Recommendations Section
  if (finalY < 250) {
    doc.setFontSize(16);
    doc.setTextColor(30, 64, 175);
    doc.text('Key Recommendations', 20, finalY + 15);

    doc.setFontSize(11);
    doc.setTextColor(0, 0, 0);
    const recommendations = [
      '✓ Launch your own branded ordering platform',
      '✓ Reduce dependency on third-party delivery apps',
      '✓ Build direct relationships with customers',
      '✓ Implement customer loyalty programs',
      '✓ Track and optimize your marketing ROI'
    ];

    let recY = finalY + 25;
    recommendations.forEach((rec) => {
      doc.text(rec, 25, recY);
      recY += 8;
    });
  }

  // Footer
  doc.setFontSize(10);
  doc.setTextColor(150, 150, 150);
  doc.text('Generated by Innowi Savings Calculator', pageWidth / 2, 285, { align: 'center' });
  doc.text(`Date: ${new Date().toLocaleDateString()}`, pageWidth / 2, 290, { align: 'center' });

  // Save the PDF
  const fileName = data.restaurantName
    ? `${data.restaurantName.replace(/\s+/g, '_')}_Marketing_Plan.pdf`
    : 'Innowi_Marketing_Plan.pdf';

  doc.save(fileName);
};
